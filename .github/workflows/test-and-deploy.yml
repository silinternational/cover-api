name: Test and Deploy

on:
  push:

env:
  BRANCH_NAME: ${{ github.ref_name }}
  IMAGE_NAME: cover
  DF_RUN_TOKEN: ${{ secrets.DF_RUN_TOKEN }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_PATH: ""

jobs:
  vet:
    name: Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run go vet
        run:  cd application && go vet ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58
          working-directory: application

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run go vet
        run:  cd application && go vet ./... && cd ..

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58
          working-directory: application

      - name: Run unit tests
        run: docker-compose -f actions-services.yml run --rm app ./run-tests.sh

  apidocs:
    name: Update api docs
    if: github.ref_name == 'develop'
    runs-on: ubuntu-latest
    env:
      S3_PATH: ${{ vars.S3_PATH }}
    steps:
      - uses: actions/checkout@v4
      - name: Update api docs
        run: docker-compose -f actions-services.yml run --rm docs ./build-push-api-docs.sh

  build-and-deploy:
    name: Build and Deploy
    if: github.ref_name == 'main' || github.ref_name == 'develop'
    needs:
      - vet
      - lint
      - test
    outputs:
      image: ${{ steps.push-image.outputs.image_to_deploy }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        id: setup
        run: |
          echo "timestamp=$(date +'%s')" >> $GITHUB_OUTPUT
          case "$BRANCH_NAME" in
          "main") echo "environment=prod" >> $GITHUB_OUTPUT ;;
          *) echo "environment=stg" >> $GITHUB_OUTPUT ;;
          esac

      - name: Build Image
        id: build-image
        run: |
          docker build -t $IMAGE_NAME:$BRANCH_NAME application
          echo "image=$IMAGE_NAME:$BRANCH_NAME" >> $GITHUB_OUTPUT

#      - name: Install dfctl
#        run: curl https://repo.deepfactor.io/install-dfctl.sh | sh --
#
#      - name: Deepfactor Scan
#        run: dfctl scan ${{ steps.build-image.outputs.image }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Images to AWS
        id: push-image
        env:
          BASE_IMAGE_WITH_TAG: ${{ steps.build-image.outputs.image }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ steps.setup.outputs.timestamp }}
          ENVIRONMENT: ${{ steps.setup.outputs.environment }}
        run: |
          docker tag $BASE_IMAGE_WITH_TAG $REGISTRY/$IMAGE_NAME-$ENVIRONMENT:$TAG
          docker push $REGISTRY/$IMAGE_NAME-$ENVIRONMENT:$TAG
          docker tag $BASE_IMAGE_WITH_TAG $REGISTRY/$IMAGE_NAME-$ENVIRONMENT:$BRANCH_NAME
          docker push $REGISTRY/$IMAGE_NAME-$ENVIRONMENT:$BRANCH_NAME
          echo "image_to_deploy=$REGISTRY/$IMAGE_NAME-$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: Install ecs-deploy
        run: |
          curl -o /usr/local/bin/ecs-deploy https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy
          chmod +x /usr/local/bin/ecs-deploy

      - name: Deploy to ECS
        id: deploy-image
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          CI_TIMESTAMP: ${{ steps.setup.outputs.timestamp }}
          IMAGE: ${{ steps.push-image.outputs.image_to_deploy }}
          ENVIRONMENT: ${{ steps.setup.outputs.environment }}
        run: ecs-deploy -c appsdev-$ENVIRONMENT -n cover-api -i $IMAGE -e CI_TIMESTAMP -t 300 --max-definitions 10
